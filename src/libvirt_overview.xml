<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:its="http://www.w3.org/2005/11/its"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.2"
         xml:id="cha-libvirt-overview">
   <title>
      <systemitem class="library">libvirt</systemitem> daemons</title>
   <info/>
   <para>A <systemitem class="library">libvirt</systemitem> deployment for accessing KVM or Xen requires one or more daemons to be installed and active on the host. <systemitem class="library">libvirt</systemitem> provides two daemon deployment options: monolithic or modular daemons. <systemitem class="library">libvirt</systemitem> has always provided the single monolithic daemon <systemitem class="daemon">libvirtd</systemitem>. It includes the primary hypervisor drivers and all secondary drivers needed for managing storage, networking, node devices, etc. The monolithic <systemitem class="daemon">libvirtd</systemitem> also provides secure remote access for external clients. Over time, <systemitem class="library">libvirt</systemitem> added support for modular daemons, where each driver runs in its own daemon, allowing users to customize their <systemitem class="library">libvirt</systemitem> deployment. Modular daemons are enabled by default, but a deployment can be switched to the traditional monolithic daemon by disabling the individual daemons and enabling <systemitem class="daemon">libvirtd</systemitem>.</para>
   <para>The modular daemon deployment is useful in scenarios where minimal <systemitem class="library">libvirt</systemitem> support is needed. For example, if virtual machine storage and networking is not provided by <systemitem class="library">libvirt</systemitem>, the <package>libvirt-daemon-driver-storage</package> and <package>libvirt-daemon-driver-network</package> packages are not required. Kubernetes is an example of an extreme case, where it handles all networking, storage, cgroups and namespace integration, etc. Only the <package>libvirt-daemon-driver-QEMU</package> package, providing <systemitem class="daemon">virtqemud</systemitem>, needs to be installed. Modular daemons allow configuring a custom <systemitem class="library">libvirt</systemitem> deployment containing only the components required for the use case.</para>
   <sect1 xml:id="libvirt-modular-daemon">
      <title>Starting and stopping the modular daemons</title>
      <para>The modular daemons are named after the driver which they are running, with the pattern <quote>virt<replaceable>DRIVER</replaceable>d</quote>. They are configured via the files <filename>/etc/libvirt/virt<replaceable>DRIVER</replaceable>d.conf</filename>. SUSE supports the <systemitem class="daemon">virtqemud</systemitem> and <systemitem class="daemon">virtxend</systemitem> hypervisor daemons, along with all the secondary daemons:</para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>virtnetworkd</emphasis> - The virtual network management daemon which provides <systemitem class="library">libvirt</systemitem>'s virtual network management APIs. For example, virtnetworkd can be used to create a NAT virtual network on the host for use by virtual machines.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtnodedevd</emphasis> - The host physical device management daemon which provides <systemitem class="library">libvirt</systemitem>'s node device management APIs. For example, virtnodedevd can be used to detach a PCI device from the host for use by a virtual machine.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtnwfilterd</emphasis> - The host firewall management daemon which provides <systemitem class="library">libvirt</systemitem>'s firewall management APIs. For example, virtnwfilterd can be used to configure network traffic filtering rules for virtual machines.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtsecretd</emphasis> - The host secret management daemon which provides <systemitem class="library">libvirt</systemitem>'s secret management APIs. For example, virtsecretd can be used to store a key associated with a LUKs volume.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtstoraged</emphasis> - The host storage management daemon which provides <systemitem class="library">libvirt</systemitem>'s storage management APIs. virtstoraged can be used to create storage pools and create volumes from those pools.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtinterfaced</emphasis> - The host NIC management daemon which provides <systemitem class="library">libvirt</systemitem>'s host network interface management APIs. For example, virtinterfaced can be used to create a bonded network device on the host. SUSE discourages the use of <systemitem class="library">libvirt</systemitem>'s interface management APIs in favor of default networking tools like wicked or NetworkManager. It is recommended to disable virtinterfaced.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtproxyd</emphasis> - A daemon to proxy connections between the traditional <systemitem class="daemon">libvirtd</systemitem> sockets and the modular daemon sockets. With a modular <systemitem class="library">libvirt</systemitem> deployment, virtproxyd allows remote clients to access the <systemitem class="library">libvirt</systemitem> APIs similar to the monolithic <systemitem class="daemon">libvirtd</systemitem>. It can also be used by local clients that connect to the monolithic <systemitem class="daemon">libvirtd</systemitem> sockets.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtlogd</emphasis> - A daemon to manage logs from virtual machine consoles. virtlogd is also used by the monolithic <systemitem class="daemon">libvirtd</systemitem>. The monolithic daemon and virtqemud <systemitem class="daemon">systemd</systemitem> unit files require virtlogd, so it is not necessary to explicitly start virtlogd.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virtlockd</emphasis> - A daemon to manage locks held against virtual machine resources such as disks. virtlockd is also used by the monolithic <systemitem class="daemon">libvirtd</systemitem>. The monolithic daemon, virtqemud, and virtxend <systemitem class="daemon">systemd</systemitem> unit files require virtlockd, so it is not necessary to explicitly start virtlockd.</para>
         </listitem>
      </itemizedlist>
      <para>
         <systemitem class="daemon">virtlogd</systemitem> and <systemitem class="daemon">virtlockd</systemitem> are also used by the monolithic <systemitem class="daemon">libvirtd</systemitem>. These daemons have always been separate from <systemitem class="daemon">libvirtd</systemitem> for security reasons.</para>
      <para>By default, the modular daemons listen for connections on the <filename>/var/run/libvirt/virt<replaceable>DRIVER</replaceable>d-sock</filename> and <filename>/var/run/libvirt/virt<replaceable>DRIVER</replaceable>d-sock-ro</filename> Unix Domain Sockets. The client library prefers these sockets over the traditional <filename>/var/run/libvirt/libvirtd-sock</filename>. The virtproxyd daemon is available for remote clients or local clients expecting the traditional <systemitem class="daemon">libvirtd</systemitem> socket.</para>
      <para>The <systemitem class="daemon">virtqemud</systemitem> and <systemitem class="daemon">virtxend</systemitem> services are enabled in the <systemitem class="daemon">systemd</systemitem> presets. The sockets for <systemitem class="daemon">virtnetworkd</systemitem>, <systemitem class="daemon">virtnodedevd</systemitem>, <systemitem class="daemon">virtnwfilterd</systemitem>, <systemitem class="daemon">virtstoraged</systemitem> and <systemitem class="daemon">virtsecretd</systemitem> are also enabled in the presets, ensuring the daemons are enabled and available when the corresponding packages are installed. Although enabled in presets for convenience, the modular daemons can also be managed with their <systemitem class="daemon">systemd</systemitem> unit files:</para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>virt<replaceable>DRIVER</replaceable>d.service</emphasis> - The main unit file for launching the virt<replaceable>DRIVER</replaceable>d daemon. We recommend configuring the service to start on boot if VMs are also configured to start on host boot.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virt<replaceable>DRIVER</replaceable>d.socket</emphasis> - The unit file corresponding to the main read-write UNIX socket <filename>/var/run/libvirt/virt<replaceable>DRIVER</replaceable>d-sock</filename>. We recommend starting this socket on boot by default.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virt<replaceable>DRIVER</replaceable>d-ro.socket</emphasis> - The unit file corresponding to the main read-only UNIX socket <filename>/var/run/libvirt/virt<replaceable>DRIVER</replaceable>d-sock-ro</filename>. We recommend starting this socket on boot by default.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>virt<replaceable>DRIVER</replaceable>d-admin.socket</emphasis> - The unit file corresponding to the administrative UNIX socket <filename>/var/run/libvirt/virt<replaceable>DRIVER</replaceable>d-admin-sock</filename>. We recommend starting this socket on boot by default.</para>
         </listitem>
      </itemizedlist>
      <para>When <systemitem class="daemon">systemd</systemitem> socket activation is used, several configuration settings in virt<replaceable>DRIVER</replaceable>d.conf are no longer honored. Instead, these settings must be controlled via the system unit files:</para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>unix_sock_group</emphasis> - UNIX socket group owner, controlled via the <option>SocketGroup</option> parameter in the <filename>virt<replaceable>DRIVER</replaceable>d.socket</filename> and <filename>virt<replaceable>DRIVER</replaceable>d-ro.socket</filename> unit files.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_ro_perms</emphasis> - Read-only UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>virt<replaceable>DRIVER</replaceable>d-ro.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_rw_perms</emphasis> - Read-write UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>virt<replaceable>DRIVER</replaceable>d.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_admin_perms</emphasis> - Admin UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>virt<replaceable>DRIVER</replaceable>d-admin.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_dir</emphasis> - Directory in which all UNIX sockets are created, independently controlled via the <option>ListenStream</option> parameter in any of the <filename>virt<replaceable>DRIVER</replaceable>d.socket</filename>, <filename>virt<replaceable>DRIVER</replaceable>d-ro.socket</filename> and <filename>virt<replaceable>DRIVER</replaceable>d-admin.socket</filename> unit files.</para>
         </listitem>
      </itemizedlist>
   </sect1>
   <sect1 xml:id="libvirt-monolithic-daemon">
      <title>Starting and stopping the monolithic daemon</title>
      <para>The monolithic daemon is known as <systemitem class="daemon">libvirtd</systemitem> and is configured via <filename>/etc/libvirt/libvirtd.conf</filename>. <systemitem class="daemon">libvirtd</systemitem> is managed with several <systemitem class="daemon">systemd</systemitem> unit files:</para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>libvirtd.service</emphasis> - The main <systemitem class="daemon">systemd</systemitem> unit file for launching <systemitem class="daemon">libvirtd</systemitem>. We recommend configuring <filename>libvirtd.service</filename> to start on boot if VMs are also configured to start on host boot.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>libvirtd.socket</emphasis> - The unit file corresponding to the main read-write UNIX socket <filename>/var/run/libvirt/libvirt-sock</filename>. We recommend enabling this unit on boot.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>libvirtd-ro.socket</emphasis> - The unit file corresponding to the main read-only UNIX socket <filename>/var/run/libvirt/libvirt-sock-ro</filename>. We recommend enabling this unit on boot.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>libvirtd-admin.socket</emphasis> - The unit file corresponding to the administrative UNIX socket <filename>/var/run/libvirt/libvirt-admin-sock</filename>. We recommend enabling this unit on boot.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>libvirtd-tcp.socket</emphasis> - The unit file corresponding to the TCP 16509 port for non-TLS remote access. This unit should not be configured to start on boot until the administrator has configured a suitable authentication mechanism.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>libvirtd-tls.socket</emphasis> - The unit file corresponding to the TCP 16509 port for TLS remote access. This unit should not be configured to start on boot until the administrator has deployed x509 certificates and optionally configured a suitable authentication mechanism.</para>
         </listitem>
      </itemizedlist>
      <para>When <systemitem class="daemon">systemd</systemitem> socket activation is used, certain configuration settings in <filename>libvirtd.conf</filename> are no longer honored. Instead, these settings must be controlled via the system unit files:</para>
      <itemizedlist>
         <listitem>
            <para>
               <emphasis>listen_tcp</emphasis> - TCP socket usage is enabled by starting the <filename>libvirtd-tcp.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>listen_tls</emphasis> - TLS socket usage is enabled by starting the <filename>libvirtd-tls.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>tcp_port</emphasis> - Port for the non-TLS TCP socket, controlled via the <option>ListenStream</option> parameter in the <filename>libvirtd-tcp.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>tls_port</emphasis> - Port for the TLS TCP socket, controlled via the <option>ListenStream</option> parameter in the <filename>libvirtd-tls.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>listen_addr</emphasis> - IP address to listen on, independently controlled via the <option>ListenStream</option> parameter in the <filename>libvirtd-tcp.socket</filename> or <filename>libvirtd-tls.socket</filename> unit files.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_group</emphasis> - UNIX socket group owner, controlled via the <option>SocketGroup</option> parameter in the <filename>libvirtd.socket</filename> and <filename>libvirtd-ro.socket</filename> unit files.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_ro_perms</emphasis> - Read-only UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>libvirtd-ro.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_rw_perms</emphasis> - Read-write UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>libvirtd.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_admin_perms</emphasis> - Admin UNIX socket permissions, controlled via the <option>SocketMode</option> parameter in the <filename>libvirtd-admin.socket</filename> unit file.</para>
         </listitem>
         <listitem>
            <para>
               <emphasis>unix_sock_dir</emphasis> - Directory in which all UNIX sockets are created, independently controlled via the <option>ListenStream</option> parameter in any of the <filename>libvirtd.socket</filename>, <filename>libvirtd-ro.socket</filename> and <filename>libvirtd-admin.socket</filename> unit files.</para>
         </listitem>
      </itemizedlist>
      <important>
         <title>Conflicting services: <systemitem class="daemon">libvirtd</systemitem> and <systemitem class="daemon">xendomains</systemitem>
         </title>
         <para>If <systemitem class="daemon">libvirtd</systemitem> fails to start, check if the service <systemitem class="daemon">xendomains</systemitem> is loaded:</para>
         <screen><prompt>&gt;</prompt>systemctl is-active xendomains active</screen>
         <para>If the command returns <literal>active</literal>, you need to stop <systemitem class="daemon">xendomains</systemitem> before you can start the <systemitem class="daemon">libvirtd</systemitem> daemon. If you want <systemitem class="daemon">libvirtd</systemitem> to also start after rebooting, additionally prevent <systemitem class="daemon">xendomains</systemitem> from starting automatically. Disable the service:</para>
         <screen><prompt>&gt;</prompt><command>sudo</command> systemctl stop xendomains
<prompt>&gt;</prompt><command>sudo</command> systemctl disable xendomains
<prompt>&gt;</prompt><command>sudo</command> systemctl start libvirtd
</screen>
         <para>
            <systemitem class="daemon">xendomains</systemitem> and <systemitem class="daemon">libvirtd</systemitem> provide the same service and when used in parallel, may interfere with one another. As an example, <systemitem class="daemon">xendomains</systemitem> may attempt to start a domU already started by <systemitem class="daemon">libvirtd</systemitem>.</para>
      </important>
   </sect1>
   <sect1 xml:id="libvirt-switch-daemons">
      <title>Switching to the monolithic daemon</title>
      <para>Several services need to be changed when switching from modular to the monolithic daemon. It is recommended to stop or evict any running virtual machines before switching between the daemon options.</para>
      <procedure>
         <step>
            <para>Stop the modular daemons and their sockets. The following example disables the QEMU daemon for KVM and several secondary daemons.</para>
            <screen>
for drv in qemu network nodedev nwfilter secret storage
do
 <prompt>&gt;</prompt><command>sudo</command> systemctl stop virt${drv}d.service
 <prompt>&gt;</prompt><command>sudo</command> systemctl stop virt${drv}d{,-ro,-admin}.socket
done
</screen>
         </step>
         <step>
            <para>Disable future start of the modular daemons</para>
            <screen>
for drv in qemu network nodedev nwfilter secret storage
do
 <prompt>&gt;</prompt><command>sudo</command> systemctl disable virt${drv}d.service
 <prompt>&gt;</prompt><command>sudo</command> systemctl disable virt${drv}d{,-ro,-admin}.socket
done
</screen>
         </step>
         <step>
            <para>Enable the monolithic <systemitem class="daemon">libvirtd</systemitem> service and sockets</para>
            <screen><prompt>&gt;</prompt><command>sudo</command> systemctl enable libvirtd.service
<prompt>&gt;</prompt><command>sudo</command> systemctl enable libvirtd{,-ro,-admin}.socket
</screen>
         </step>
         <step>
            <para>Start the monolithic <systemitem class="daemon">libvirtd</systemitem> sockets</para>
            <screen><prompt>&gt;</prompt><command>sudo</command> systemctl start libvirtd{,-ro,-admin}.socket
</screen>
         </step>
      </procedure>
   </sect1>
</chapter>
