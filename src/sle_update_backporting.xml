<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:its="http://www.w3.org/2005/11/its"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.2"
         xml:id="cha-update-backport">
   <title>Backports of source code</title>
   <info>
      <abstract>
         <para>SUSE extensively uses backports, for example for the migration of current software fixes and features into released SUSE Linux Enterprise packages. The information in this chapter explains why it can be misleading to compare version numbers to judge the capabilities and the security of SUSE Linux Enterprise software packages. This chapter also explains how SUSE keeps the system software secure and current while maintaining compatibility for your application software on top of SUSE Linux Enterprise products. You will also learn how to check which public security issues actually are addressed in your SUSE Linux Enterprise system software, and the current status of your software. <!--To
       do so, we first provide some background on how free software is
       developed and how it gets into Linux distributions.--></para>
      </abstract>
   </info>
   <sect1 xml:id="sec-update-backports-reasons-for">
      <title>Reasons for backporting</title>
      <para>Upstream developers are primarily concerned with advancing the software they develop. Often they combine fixing bugs with introducing new features which have not yet received extensive testing and which may introduce new bugs.</para>
      <para>For distribution developers, it is important to distinguish between:</para>
      <itemizedlist>
         <listitem>
            <para>bugfixes with a limited potential for disrupting functionality; and</para>
         </listitem>
         <listitem>
            <para>changes that may disrupt existing functionality.</para>
         </listitem>
      </itemizedlist>
      <para>Usually, distribution developers do not follow all upstream changes when a package has become part of a released distribution. Usually they stick instead with the upstream version that they initially released and create patches based on upstream changes to fix bugs. This practice is known as <emphasis>backporting</emphasis>.</para>
      <para>Distribution developers generally will only introduce a newer version of software in two cases:</para>
      <itemizedlist>
         <listitem>
            <para>when the changes between their packages and the upstream versions have become so large that backporting is no longer feasible, or</para>
         </listitem>
         <listitem>
            <para>for software that inherently ages badly, like anti-malware software.</para>
         </listitem>
      </itemizedlist>
      <para>SUSE uses backports extensively as we strike a good balance between several concerns for enterprise software. The most important of them are:</para>
      <itemizedlist>
         <listitem>
            <para>Having stable interfaces (APIs) that software vendors can rely on when building products for use on SUSE's enterprise products.</para>
         </listitem>
         <listitem>
            <para>Ensuring that packages used in the release of SUSE's enterprise products are of the highest quality and have been thoroughly tested, both in themselves and as part of the whole enterprise product.</para>
         </listitem>
         <listitem>
            <para>Maintaining the various certifications of SUSE's enterprise products by other vendors, like certifications for Oracle or SAP products.</para>
         </listitem>
         <listitem>
            <para>Allowing SUSE's developers to focus on making the next product version, rather than spreading their focus thinly across a wide range of releases.</para>
         </listitem>
         <listitem>
            <para>Keeping a clear view of what is in a particular enterprise release, so that our support can provide accurate and timely information about it.</para>
         </listitem>
      </itemizedlist>
   </sect1>
   <sect1 xml:id="sec-update-backports-reasons-against">
      <title>Reasons against backports</title>
      <para>It is a general policy rule that no new upstream versions of a package are introduced into our enterprise products. This rule is not an absolute rule however. For certain types of packages, in particular anti-virus software, security concerns weigh heavier than the conservative approach that is preferable from the perspective of quality assurance. For packages in that class, occasionally newer versions are introduced into a released version of an enterprise product line.</para>
      <para>Sometimes also for other types of packages the choice is made to introduce a new version rather than a backport. This is done when producing a backport is not economically feasible or when there is a very relevant technical reason to introduce the newer version.</para>
   </sect1>
   <sect1 xml:id="sec-update-backports-implications">
      <title>The implications of backports for interpreting version numbers</title>
      <para>Because of the practice of backporting, one cannot simply compare version numbers to determine whether a SUSE package contains a fix for a particular issue or has had a particular feature added to it. With backporting, the upstream part of a SUSE package's version number merely indicates what upstream version the SUSE package is based on. It may contain bug fixes and features that are not in the corresponding upstream release, but that have been backported into the SUSE package.</para>
      <para>
         <remark>froh: there will be some new "CVE fixed in SUSE Linux Enterprise" lookup tool, need to work with sarsene@ to figure the details or a link.</remark> One particular area where this limited value of version numbers when backporting is involved can cause problems is with security scanning tools. Some security vulnerability scanning tools (or particular tests in such tools) operate solely on version information. These tools and tests are therefore prone to generating <quote>false positives</quote> (when a piece of software is incorrectly identified as vulnerable) when backports are involved. When evaluating reports from security scanning tools, always check whether an entry is based on a version number or on an actual vulnerability test.</para>
   </sect1>
   <sect1 xml:id="sec-update-backports-checks">
      <title>Checking for fixed bugs and backported features</title>
      <para>Information about backported bug fixes and features is stored in several locations:</para>
      <itemizedlist mark="bullet" spacing="normal">
         <listitem>
            <para>The package's changelog:</para>
            <screen><prompt>&gt;</prompt>rpm -q --changelog <package><replaceable>name-of-installed-package</replaceable></package><prompt>&gt;</prompt>rpm -qp --changelog <filename><replaceable>packagefile.rpm</replaceable>packagefile.rpm</filename></screen>
            <para>The output briefly documents the change history of the package.</para>
         </listitem>
         <listitem>
            <para>The package changelog may contain entries like <literal>bsc#1234</literal> (<quote>
                  <emphasis>B</emphasis>ugzilla<emphasis>S</emphasis>use. <emphasis>C</emphasis>om</quote>) that refer to bugs in SUSE's Bugzilla tracking system or links to other bugtracking systems. Because of confidentiality policies, not all such information may be accessible to you.</para>
         </listitem>
         <listitem>
            <para>A package may contain a <filename>/usr/share/doc/<replaceable>PACKAGENAME</replaceable>/README.SUSE</filename> file which contains general, high-level information specific to the SUSE package.</para>
         </listitem>
         <listitem>
            <para>The RPM source package contains the patches that were applied during the building of the regular binary RPMs as separate files that can be interpreted if you are familiar with reading source code. See <phrase xmlns:l="http://docbook.org/ns/docbook/l10n" role="document-xref">Book <quote>Administration Guide</quote>, </phrase>
               <xref linkend="sec-zypper-softman-sources" xrefstyle="%label &#34;%c&#34;"/> for installing sources of SUSE Linux Enterprise software. See <phrase xmlns:l="http://docbook.org/ns/docbook/l10n" role="document-xref">Book <quote>Administration Guide</quote>, </phrase>
               <xref linkend="sec-rpm-sources" xrefstyle="%label &#34;%c&#34;"/> for building packages on SUSE Linux Enterprise. See the <link xlink:href="https://ftp.osuosl.org/pub/rpm/max-rpm/">Maximum RPM</link> book for details about software package builds for SUSE Linux Enterprise.</para>
         </listitem>
         <listitem>
            <para>For security bug fixes, consult the <link xlink:href="https://www.suse.com/support/security/">SUSE security announcements</link>. These often refer to bugs through standardized names like <literal>CAN-2005-2495</literal> which are maintained by the <link xlink:href="https://cve.mitre.org">Common Vulnerabilities and Exposures (CVE)</link> project.</para>
         </listitem>
      </itemizedlist>
   </sect1>
</chapter>
