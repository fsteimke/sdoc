<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:its="http://www.w3.org/2005/11/its"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.2"
         xml:id="cha-ulp"
         xml:lang="en">
   <title>User space live patching</title>
   <info>
      <abstract>
         <para>This chapter describes the basic principles and usage of user space live patching.</para>
      </abstract>
   </info>
   <sect1 xml:id="sec-ulp">
      <title>About user space live patching</title>
      <para>User space live patching (ULP) refers to the process of applying patches to the libraries used by a running process without interrupting them. Every time a security fix is available as a live patch, customer services will be secured after applying the live patch without restarting the processes.</para>
      <para>ULP is supported on the following architectures:</para>
      <itemizedlist>
         <listitem>
            <para>AMD64/IntelÂ 64</para>
         </listitem>
         <listitem>
            <para>ppc64le (starting with <phrase role="productname">SUSE Linux Enterprise Server</phrase> 15 SP7)</para>
         </listitem>
      </itemizedlist>
      <para>Live patching operations are performed using the <systemitem>ulp</systemitem> tool that is part of <systemitem>libpulp</systemitem>. <systemitem>libpulp</systemitem> is a framework that consists of the <systemitem>libpulp.so</systemitem> library and the <command>ulp</command> binary that makes libraries live patchable and applies live patches.</para>
      <tip>
         <para>You can run the <command>ulp</command> command either as a normal user or a privileged user via the <command>sudo</command> mechanism. The difference is that running <command>ulp</command> via <command>sudo</command> lets you view information of processes or patch processes that are running by <systemitem class="username">root</systemitem>.</para>
      </tip>
      <tip>
         <title>Install <package>libpulp-load-default</package>
         </title>
         <para>The <package>libpulp-load-default</package> automates the requirements and manual steps mentioned in <xref linkend="sec-ulp-prereqs"/> and <xref linkend="sec-ulp-libpulp"/>. If you install the package, you can skip those sections.</para>
      </tip>
      <sect2 xml:id="sec-ulp-prereqs">
         <title>Prerequisites</title>
         <para>For ULP to work, two requirements must be met.</para>
         <itemizedlist>
            <listitem>
               <para>Install the ULP on your system by running:</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> zypper in libpulp0 libpulp-tools</screen>
            </listitem>
            <listitem>
               <para>Applications with desired live patch support must be launched preloading the <systemitem>libpulp.so.0</systemitem> library. See <xref linkend="sec-ulp-libpulp"/> for more details.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="sec-ulp-supported-libs">
         <title>Supported libraries</title>
         <para>Currently, only <systemitem>glibc</systemitem> and <systemitem>openssl</systemitem> (<systemitem>openssl1_1</systemitem> and <systemitem>openssl-3</systemitem>) are supported. Additional packages will be available after they are prepared for live patching. To receive <systemitem>glibc</systemitem> and <systemitem>openssl-1_1-</systemitem> live patches, install the following packages:</para>
         <screen><prompt>&gt;</prompt>zypper install glibc-livepatches openssl-1_1-livepatches openssl-3-livepatches</screen>
      </sect2>
      <sect2 xml:id="sec-ulp-libpulp">
         <title>Using <systemitem>libpulp</systemitem>
         </title>
         <para>To enable live patching on an application, you need to preload the <systemitem>libpulp.so.0</systemitem> library when starting the application:</para>
         <screen><prompt>&gt;</prompt>LD_PRELOAD=/usr/lib64/libpulp.so.0 <replaceable>APPLICATION_CMD</replaceable></screen>
         <sect3 xml:id="sec-ulp-livepatch-check">
            <title>Checking if a library is live patchable</title>
            <para>To check whether a library is live patchable, use the following command:</para>
            <screen><prompt>&gt;</prompt>ulp livepatchable <replaceable>PATH_TO_LIBRARY</replaceable></screen>
         </sect3>
         <sect3 xml:id="sec-ulp-livepatch-container-check">
            <title>Checking if a <filename>.so</filename> file is a live patch container</title>
            <para>A shared object (<filename>.so</filename>) is a live patch container if it contains the ULP patch description embedded into it. You can verify it with the following command:</para>
            <screen><prompt>&gt;</prompt>readelf -S <replaceable>SHARED_OBJECT</replaceable> | grep .ulp</screen>
            <para>If the output shows that there are both <literal>.ulp</literal> and <literal>.ulp.rev</literal> sections in the shared object, then it is a live patch container.</para>
         </sect3>
         <sect3 xml:id="sec-ulp-apply-livepatch">
            <title>Applying live patches</title>
            <para>Live patches provided by SUSE are shipped through usual updates if the following packages are installed: <package>glibc-livepatches</package>
               <package>openssl-livepatches</package>
               <package>openssl-3-livepatches</package>.</para>
            <para>Custom live patches are applied using the <command>ulp trigger</command> command, for example:</para>
            <screen><prompt>&gt;</prompt>ulp trigger -p <replaceable>PID</replaceable><replaceable>LIVEPATCH</replaceable>.so</screen>
            <para>Replace <literal>PID</literal> with the process ID of the running process that uses the library to be patched and <literal>LIVEPATCH.so</literal> with the actual live patch file. The command returns one of the following status messages:</para>
            <variablelist>
               <varlistentry>
                  <term>SUCCESS</term>
                  <listitem>
                     <para>The live patching operation was successful.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>SKIPPED</term>
                  <listitem>
                     <para>The patch was skipped because it was not designed for any library that is loaded in the process.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>ERROR</term>
                  <listitem>
                     <para>An error occurred, and you can retrieve more information by inspecting the <systemitem>libpulp</systemitem> internal message buffer. See <xref linkend="sec-ulp-internal-messages"/> for more information.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
            <para>It is also possible to apply multiple live patches by using wildcards, for example:</para>
            <screen><prompt>&gt;</prompt>ulp trigger '*.so'</screen>
            <para>The command tries to apply every patch in the current folder to every process that have the <systemitem>libpulp</systemitem> library loaded. If the patch is not suitable for the process, it is automatically skipped. In the end, the tool shows how many patches it successfully applied to how many processes.</para>
         </sect3>
         <sect3 xml:id="sec-ulp-revert-livepatch">
            <title>Reverting live patches</title>
            <para>You can use the <command>ulp trigger</command> command to revert live patches. There are two ways to revert live patches. You can revert a live patch by using the <option>--revert</option> switch and passing the live patch container:</para>
            <screen><prompt>&gt;</prompt>ulp trigger -p <replaceable>PID</replaceable> --revert <replaceable>LIVEPATCH</replaceable>.so</screen>
            <para>Alternatively, it is possible to remove all patches associated with a particular library, for example:</para>
            <screen><prompt>&gt;</prompt>ulp trigger -p <replaceable>PID</replaceable> --revert-all=<replaceable>LIBRARY</replaceable></screen>
            <para>In the example, <replaceable>LIBRARY</replaceable> refers to the actual library, such as <systemitem>libcrypto.so.1.1</systemitem>.</para>
            <para>The latter approach can be useful when the source code of the original live patch is not available. Or you want to remove a specific old patch and apply a new one while the target application is still running a secure code, for example:</para>
            <screen><prompt>&gt;</prompt>ulp trigger -p <replaceable>PID</replaceable>  --revert-all=libcrypto.so.1.1 new_livepatch2.so</screen>
         </sect3>
         <sect3 xml:id="sec-ulp-verify-patches">
            <title>View applied patches</title>
            <para>It is possible to verify which applications have live patches applied by running:</para>
            <screen><prompt>&gt;</prompt>ulp patches</screen>
            <para>The output shows which libraries are live patchable and patches loaded in programs, as well which bugs the patch addresses:</para>
            <screen>PID: 10636, name: test
  Livepatchable libraries:
    in /lib64/libc.so.6:
      livepatch: libc_livepatch1.so
        bug labels: jsc#SLE-0000
    in /usr/lib64/libpulp.so.0:</screen>
            <para>It is also possible to see which functions are patched by the live patch:</para>
            <screen><prompt>&gt;</prompt>ulp dump <replaceable>LIVEPATCH.so</replaceable></screen>
         </sect3>
         <sect3 xml:id="sec-ulp-internal-messages">
            <title>View internal message queue</title>
            <para>Log messages from <systemitem>libpulp.so</systemitem> are stored in a buffer inside the library and are not displayed unless requested by the user. To show these messages, run:</para>
            <screen><prompt>&gt;</prompt>ulp messages -p <replaceable>PID</replaceable></screen>
         </sect3>
      </sect2>
   </sect1>
   <sect1 xml:id="sec-ulp-info">
      <title>More information</title>
      <para>Further information about <systemitem>libpulp</systemitem> is available in the project's <link xlink:href="https://github.com/SUSE/libpulp">Git repository</link>.</para>
   </sect1>
</chapter>
