<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:its="http://www.w3.org/2005/11/its"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.2"
         xml:id="xen2kvm-migration">
   <info>
      <title>Xen to KVM migration guide</title>
   </info>
   <para>As the KVM virtualization solution is becoming more and more popular among server administrators, many of them need a path to migrate their existing Xen based environments to KVM. As of now, there are no mature tools to automatically convert Xen VMs to KVM. There is, however, a technical solution that helps convert Xen virtual machines to KVM. The following information and procedures help you to perform such a migration.</para>
   <important>
      <title>Migration procedure not supported</title>
      <para>The migration procedure described in this document is not fully supported by SUSE. We provide it as a guidance only.</para>
   </important>
   <sect1 xml:id="x2k-v2v">
      <title>Migration to KVM using <command>virt-v2v</command>
      </title>
      <para>This section contains information to help you import virtual machines from foreign hypervisors (such as Xen) to KVM managed by <systemitem class="library">libvirt</systemitem>.</para>
      <tip>
         <title>Microsoft Windows guests</title>
         <para>This section is focused on converting Linux guests. Converting Microsoft Windows guests using <command>virt-v2v</command> is the same as converting Linux guests, except with regard to handling the Virtual Machine Driver Pack (VMDP). Additional details on converting Windows guests with the VMDP can be found separately at <link xlink:href="https://documentation.suse.com/sle-vmdp/">Virtual Machine Driver Pack documentation</link>.</para>
      </tip>
      <sect2 xml:id="x2k-v2v-intro">
         <title>Introduction to <command>virt-v2v</command>
         </title>
         <para><command>virt-v2v</command> is a command-line tool to convert VM Guests from a foreign hypervisor to run on KVM managed by <systemitem class="library">libvirt</systemitem>. It enables paravirtualized virtio drivers in the converted virtual machine if possible. A list of supported operating systems and hypervisors follows:</para>
         <itemizedlist mark="bullet" spacing="normal">
            <title>Supported guest operating systems</title>
            <listitem>
               <para>SUSE Linux Enterprise Server</para>
            </listitem>
            <listitem>
               <para>openSUSE</para>
            </listitem>
            <listitem>
               <para>Red Hat Enterprise Linux</para>
            </listitem>
            <listitem>
               <para>Fedora</para>
            </listitem>
            <listitem><!-- FIXME --><!-- XXX There surely are other windows versions to add here -->
               <para>Microsoft Windows Server 2003 and 2008</para>
            </listitem>
         </itemizedlist>
         <itemizedlist mark="bullet" spacing="normal">
            <title>Supported source hypervisor</title>
            <listitem>
               <para>Xen</para>
            </listitem>
         </itemizedlist>
         <itemizedlist mark="bullet" spacing="normal">
            <title>Supported target hypervisor</title>
            <listitem>
               <para>KVM (managed by <systemitem class="library">libvirt</systemitem>)</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="x2k-v2v-install">
         <title>Installing <command>virt-v2v</command>
         </title>
         <para>The installation of <command>virt-v2v</command> is simple:</para>
         <screen><prompt>&gt;</prompt><command>sudo</command> zypper install virt-v2v</screen>
         <para>Remember that <command>virt-v2v</command> requires <systemitem class="username">root</systemitem> privileges, so you need to run it either as <systemitem class="username">root</systemitem>, or via <command>sudo</command>.</para>
      </sect2>
      <sect2 xml:id="x2k-v2v-convert">
         <title>Converting virtual machines to run under KVM managed by <systemitem class="library">libvirt</systemitem>
         </title>
         <para><command>virt-v2v</command> converts virtual machines from the Xen hypervisor to run under KVM managed by <systemitem class="library">libvirt</systemitem>. To learn more about <systemitem class="library">libvirt</systemitem> and <command>virsh</command>, see <xref linkend="part-virt-libvirt"/>. Additionally, all <command>virt-v2v</command> command line options are explained in the <command>virt-v2v</command> man page (<command>man 1 virt-v2v</command>).</para>
         <para>Before converting a virtual machine, make sure to complete the following steps:</para>
         <procedure>
            <title>Preparing the environment for the conversion</title>
            <step>
               <para>Create a new local storage pool.</para>
               <para><command>virt-v2v</command> copies the storage of the source virtual machine to a local storage pool managed by <systemitem class="library">libvirt</systemitem> (the original disk image remains unchanged). You can create the pool either with Virtual Machine Manager or <command>virsh</command>. For more information, see <xref linkend="sec-libvirt-storage-vmm"/> and <xref linkend="sec-libvirt-storage-virsh"/>.</para>
            </step>
            <step>
               <para>Prepare the local network interface.</para>
               <para>Check that the converted virtual machine can use a local network interface on the VM Host Server. It is normally a network bridge and if it is not yet defined, create it with <menuchoice><guimenu>YaST</guimenu><guimenu>System</guimenu><guimenu>Network Settings</guimenu><guimenu>Add</guimenu><guimenu>Bridge</guimenu></menuchoice>.</para>
               <note>
                  <title>Mappings of network devices</title>
                  <para>Network devices on the source Xen host can be mapped during the conversion process to corresponding network devices on the KVM target host. For example, the Xen bridge <literal>br0</literal> can be mapped to the default KVM network device. Sample mappings can be found in <filename>/etc/virt-v2v.conf</filename>. To enable these mappings, modify the XML rule and ensure the section is not commented out with <literal>&lt;!--</literal> and <literal>--&gt;</literal> markers. For example:</para>
                  <screen>
 &lt;network type='bridge' name='br0'&gt;
   &lt;network type='network' name='default'/&gt;
 &lt;/network&gt;
</screen>
               </note>
               <tip>
                  <title>No network bridge</title>
                  <para>If there is no network bridge available, Virtual Machine Manager can optionally create it.</para>
               </tip>
            </step>
         </procedure>
         <para><command>virt-v2v</command> has the following basic command syntax:</para>
         <screen>virt-v2v -i <replaceable>INPUT_METHOD</replaceable> -os <replaceable>STORAGE_POOL</replaceable><replaceable>SOURCE_VM</replaceable></screen>
         <variablelist>
            <varlistentry>
               <term>input_method</term>
               <listitem>
                  <para>There are two input methods: <literal>libvirt</literal> or <literal>libvirtxml</literal>. See the <replaceable>SOURCE_VM</replaceable> parameter for more information.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>storage_pool</term>
               <listitem>
                  <para>The storage pool you already prepared for the target virtual machine.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>source_vm</term>
               <listitem>
                  <para>The source virtual machine to convert. It depends on the <replaceable>INPUT_METHOD</replaceable> parameter: for <literal>libvirt</literal>, specify the name of a libvirt domain. For <literal>libvirtxml</literal>, specify the path to an XML file containing a libvirt domain specification.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <note>
            <title>Conversion time</title>
            <para>Conversion of a virtual machine takes a lot of system resources, mainly for copying the whole disk image for a virtual machine. Converting a single virtual machine typically takes up to 10 minutes.Virtual machines using large disk images can take much longer.</para>
         </note>
         <sect3 xml:id="x2k-v2v-convert-xml">
            <title>Conversion based on the <systemitem class="library">libvirt</systemitem> XML description file</title>
            <para>This section describes how to convert a local Xen virtual machine using the <systemitem class="library">libvirt</systemitem> XML configuration file. This method is suitable if the host is already running the KVM hypervisor. Make sure that the <systemitem class="library">libvirt</systemitem> XML file of the source virtual machine, and the <systemitem class="library">libvirt</systemitem> storage pool referenced from it are available on the local host.</para>
            <procedure>
               <step>
                  <para>Obtain the <systemitem class="library">libvirt</systemitem> XML description of the source virtual machine.</para>
                  <tip>
                     <title>Obtaining the XML files</title>
                     <para>To obtain the <systemitem class="library">libvirt</systemitem> XML files of the source virtual machine, you must run the host OS under the Xen kernel. If you already rebooted the host to the KVM-enabled environment, reboot back to the Xen kernel, dump the <systemitem class="library">libvirt</systemitem> XML file, and then reboot back to the KVM environment.</para>
                  </tip>
                  <para>First identify the source virtual machine under virsh:</para>
                  <screen><prompt role="root">#</prompt>virsh list
 Id    Name                           State
----------------------------------------------------
[...]
  2     sles12_xen                     running
[...]</screen>
                  <para><literal>sles12_xen</literal> is the source virtual machine to convert. Now export its XML and save it to <filename>sles12_xen.xml</filename>:</para>
                  <screen><prompt role="root">#</prompt>virsh dumpxml sles12_xen &gt; sles12_xen.xml</screen>
               </step>
               <step>
                  <para>Verify that all disk image paths are correct from the KVM host's perspective. This is not a problem when converting on one machine, but may require manual changes when converting using an XML dump from another host.</para>
                  <screen>&lt;source file='/var/lib/libvirt/images/XenPool/SLES.qcow2'/&gt;</screen>
                  <tip>
                     <title>Copying images</title>
                     <para>To avoid copying an image twice, manually copy the disk image or images directly to the <systemitem class="library">libvirt</systemitem> storage pool. Update the source file entries in the XML description file. The <command>virt-v2v</command> process detects the existing disks and converts them in place.</para>
                  </tip>
               </step>
               <step>
                  <para>Run <command>virt-v2v</command> to convert to KVM virtual machine:</para>
                  <screen><prompt role="root">#</prompt>virt-v2v sles12_xen.xml<co xml:id="v2v-xml"/> \
-i <replaceable>LIBVIRTXML</replaceable><co xml:id="v2v-method"/> \
-os <replaceable>remote_host.example.com:/exported_dir</replaceable><co xml:id="v2v-pool"/> \
--bridge <replaceable>br0</replaceable><co xml:id="v2v-bridge"/> \
-on <replaceable>sles12_kvm</replaceable><co xml:id="v2v-name"/></screen>
                  <calloutlist>
                     <callout arearefs="v2v-xml">
                        <para>The XML description of the source Xen-based virtual machine.</para>
                     </callout>
                     <callout arearefs="v2v-method">
                        <para><command>virt-v2v</command> reads the information about the source virtual machine from a <systemitem class="library">libvirt</systemitem> XML file.</para>
                     </callout>
                     <callout arearefs="v2v-pool">
                        <para>Storage pool where the target virtual machine disk image is placed. In this example, the image is placed on an NFS share <filename>/exported_dir</filename> on the <literal>remote_host.example.com</literal> server.</para>
                     </callout>
                     <callout arearefs="v2v-bridge">
                        <para>The target KVM-based virtual machine uses the network bridge <literal>br0</literal> on the host.</para>
                     </callout>
                     <callout arearefs="v2v-name">
                        <para>The target virtual machine is renamed to <literal>sles12_kvm</literal> to prevent name collision with the existing virtual machine of the same name.</para>
                     </callout>
                  </calloutlist>
               </step>
            </procedure>
         </sect3>
         <sect3 xml:id="x2k-v2v-convert-domain">
            <title>Conversion based on the <systemitem class="library">libvirt</systemitem> domain name</title>
            <para>This method is useful if you are still running <systemitem class="library">libvirt</systemitem> under Xen, and plan to reboot to the KVM hypervisor later.</para>
            <procedure>
               <step>
                  <para>Find the <systemitem class="library">libvirt</systemitem> domain name of the virtual machine you want to convert.</para>
                  <screen><prompt role="root">#</prompt>virsh list
 Id    Name                           State
----------------------------------------------------
[...]
  2     sles12_xen                     running
[...]</screen>
                  <para><literal>sles12_xen</literal> is the source virtual machine to convert.</para>
               </step>
               <step>
                  <para>Run <command>virt-v2v</command> to convert to KVM virtual machine:</para>
                  <screen><prompt role="root">#</prompt>virt-v2v sles12_xen<co xml:id="v2v-domain"/> \
-i <replaceable>libvirt</replaceable><co xml:id="v2v-method1"/> \
-os <replaceable>storage_pool</replaceable><co xml:id="v2v-pool1"/> \
--network <replaceable>eth0</replaceable><co xml:id="v2v-net"/> \
-of qcow2<co xml:id="v2v-qcow"/> \
-oa sparse<co xml:id="v2v-sparse"/> \
-on <replaceable>sles12_kvm</replaceable></screen>
                  <calloutlist>
                     <callout arearefs="v2v-domain">
                        <para>The domain name of the Xen-based virtual machine.</para>
                     </callout>
                     <callout arearefs="v2v-method1">
                        <para><command>virt-v2v</command> reads the information about the source virtual machine directly from the active <systemitem class="library">libvirt</systemitem> connection.</para>
                     </callout>
                     <callout arearefs="v2v-pool1">
                        <para>The target disk image is placed in a local <systemitem class="library">libvirt</systemitem> storage pool.</para>
                     </callout>
                     <callout arearefs="v2v-net">
                        <para>All guest bridges (or networks) are connected to a locally managed network.</para>
                     </callout>
                     <callout arearefs="v2v-qcow">
                        <para>Format for the disk image of the target virtual machine. Supported options are <option>raw</option> or <option>qcow2</option>.</para>
                     </callout>
                     <callout arearefs="v2v-sparse">
                        <para>Whether the converted guest disk space is <option>sparse</option> or <option>preallocated</option>.</para>
                     </callout>
                  </calloutlist>
               </step>
            </procedure>
         </sect3>
         <sect3 xml:id="x2k-v2v-convert-remote">
            <title>Converting a remote Xen virtual machine</title>
            <para>This method is useful if you need to convert a Xen virtual machine running on a remote host. As <command>virt-v2v</command> connects to the remote host via <command>ssh</command>, ensure the SSH service is running on the host.</para>
            <note>
               <title>Passwordless SSH access</title>
               <para><command>virt-v2v</command> requires a passwordless SSH connection to the remote host. This means a connection using an SSH key added to the ssh-agent. See <command>man ssh-keygen</command> and <command>man ssh-add</command> for more details on this. More information is also available at <xref linkend="cha-ssh"/>.</para>
            </note>
            <para>To connect to a remote <systemitem class="library">libvirt</systemitem> connection, construct a valid connection URI relevant for your remote host. In the following example, the remote host name is <literal>remote_host.example.com</literal>, and the user name for the connection is <systemitem class="username">root</systemitem>. The connection URI then looks as follows:</para>
            <screen>xen+ssh://root@remote_host.example.com/</screen>
            <para>For more information on <systemitem class="library">libvirt</systemitem> connection URIs, see <link xlink:href="https://libvirt.org/uri.html"/>.</para>
            <procedure>
               <step>
                  <para>Find the <systemitem class="library">libvirt</systemitem> domain name of the remote virtual machine you want to convert.</para>
                  <screen><prompt role="root">#</prompt>virsh -c xen+ssh://root@remote_host.example.com/ list
 Id    Name                           State
----------------------------------------------------
  1     sles12_xen                     running
[...]</screen>
                  <para><literal>sles12_xen</literal> is the source virtual machine to convert.</para>
               </step>
               <step>
                  <para>The <command>virt-v2v</command> command for the remote connection looks like this:</para>
                  <screen><prompt role="root">#</prompt>virt-v2v sles12_xen \
-i <replaceable>libvirt</replaceable> \
-ic <replaceable>xen+ssh://root@remote_host.example.com/</replaceable> \
-os <replaceable>local_storage_pool</replaceable> \
--bridge <replaceable>br0</replaceable></screen>
               </step>
            </procedure>
         </sect3>
      </sect2>
      <sect2 xml:id="x2k-v2v-run">
         <title>Running converted virtual machines</title>
         <para>After <command>virt-v2v</command> completes successfully, a new <systemitem class="library">libvirt</systemitem> domain is created with the name specified with the <option>-on</option> option. If you did not specify <option>-on</option>, the same name as the source virtual machine is used. The new guest can be managed with standard <systemitem class="library">libvirt</systemitem> tools, such as <command>virsh</command> or Virtual Machine Manager.</para>
         <tip>
            <title>Rebooting the machine</title>
            <para>If you completed the conversion under Xen as described in <xref linkend="x2k-v2v-convert-domain"/>, you may need to reboot the host machine and boot with the non-Xen kernel.</para>
         </tip>
      </sect2>
   </sect1>
   <sect1>
      <title>Xen to KVM manual migration</title>
      <sect2>
         <title>General outline</title>
         <para>The preferred solution to manage virtual machines is based on <systemitem class="library">libvirt</systemitem>; for more information, see <link xlink:href="https://libvirt.org/"/>. It has several advantages over the manual way of defining and running virtual machines—<systemitem class="library">libvirt</systemitem> is cross-platform, supports many hypervisors, has secure remote management, has virtual networking, and, most of all, provides a unified abstract layer to manage virtual machines. Therefore the main focus of this article is on the <systemitem class="library">libvirt</systemitem> solution.</para>
         <para>Generally, the Xen to KVM migration consists of the following basic steps:</para>
         <procedure>
            <step>
               <para>Make a backup copy of the original Xen VM Guest.</para>
            </step>
            <step>
               <para>Optionally, apply changes specific to paravirtualized guests.</para>
            </step>
            <step>
               <para>Obtain information about the original Xen VM Guest and update it to KVM equivalents.</para>
            </step>
            <step>
               <para>Shut down the guest on the Xen host, and run the new one under the KVM hypervisor.</para>
            </step>
         </procedure>
         <warning>
            <title>No live migration</title>
            <para>The Xen to KVM migration cannot be done live while the source VM Guest is running. Before running the new KVM-ready VM Guest, you are advised to shut down the original Xen VM Guest.</para>
         </warning>
      </sect2>
      <sect2>
         <title>Back up the Xen VM Guest</title>
         <para>To back up your Xen VM Guest, follow these steps:</para>
         <procedure>
            <step>
               <para>Identify the relevant Xen guest you want to migrate, and remember its ID/name.</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh list --all
Id Name                 State
----------------------------------
 0 Domain-0             running
 1 SLES15SP3            running
[...]</screen>
            </step>
            <step>
               <para>Shut down the guest. You can do this either by shutting down the guest OS, or with <command>virsh</command>:</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh shutdown SLES11SP3</screen>
            </step>
            <step>
               <para>Back up its configuration to an XML file.</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh dumpxml SLES11SP3 &gt; sles11sp3.xml</screen>
            </step>
            <step>
               <para>Back up its disk image file. Use the <command>cp</command> or <command>rsync</command> commands to create the backup copy. Remember that it is always a good idea to check the copy with the <command>md5sum</command> command.</para>
            </step>
            <step>
               <para>After the image file is backed up, you can start the guest again with</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh start SLES11SP3</screen>
            </step>
         </procedure>
      </sect2>
      <sect2>
         <title>Changes specific to paravirtualized guests</title>
         <para>Apply the following changes if you are migrating a paravirtualized Xen guest. You can do it either on the running guest, or on the stopped guest using <literal>guestfs-tools</literal>. <!-- toba: maybe add more info on guestfs-tools --></para>
         <important>
            <para>After applying the changes described in this section, the image file related to the migrated VM Guest is not usable under Xen anymore.</para>
         </important>
         <sect3>
            <title>Install the default kernel</title>
            <warning>
               <title>No booting</title>
               <para>After installing the default kernel, the system fails to boot the Xen guest.</para>
            </warning>
            <para>Before cloning the Xen guest disk image for use under the KVM hypervisor, make sure it is bootable <emphasis>without</emphasis> the Xen hypervisor. This is crucial for paravirtualized Xen guests as they normally contain a special Xen kernel, and often do not have a complete GRUB 2 boot loader installed.</para>
            <orderedlist spacing="normal">
               <listitem>
                  <para>For SLES 11, update the <filename>/etc/sysconfig/kernel</filename> file. Change the <literal>INITRD_MODULES</literal> parameter by removing all Xen drivers and replacing them with virtio drivers. Replace</para>
                  <screen>INITRD_MODULES="xenblk xennet"</screen>
                  <para>with</para>
                  <screen>INITRD_MODULES="virtio_blk virtio_pci virtio_net virtio_balloon"</screen>
                  <para>For SLES 12, 15 and openSUSE, search for <literal>xenblk xennet</literal> in <filename>/etc/dracut.conf.d/*.conf</filename> and replace them with <literal>virtio_blk virtio_pci virtio_net virtio_balloon</literal></para>
               </listitem>
               <listitem>
                  <para>Paravirtualized Xen guests run a specific Xen kernel. To run the guest under KVM, you need to install the default kernel.</para>
                  <note>
                     <title>Default kernel is already installed</title>
                     <para>You do not need to install the default kernel for a fully virtualized guest, as it is already installed.</para>
                  </note>
                  <para>Enter <command>rpm -q kernel-default</command> on the Xen guest to find out whether the default kernel is installed. If not, install it with <command>zypper in kernel-default</command>.</para>
                  <para>The kernel we are going to use to boot the guest under KVM must have <emphasis>virtio</emphasis> (paravirtualized) drivers available. Run the following command to find out. Do not forget to replace <literal>6.4.0-150700.38</literal> with your kernel version:</para>
                  <screen><prompt>&gt;</prompt><command>sudo</command> sudo find /lib/modules/6.4.0-150700.38-default/kernel/drivers/ -name virtio*
/lib/modules/6.4.0-150700.38-default/kernel/drivers/block/virtio_blk.ko.zst
/lib/modules/6.4.0-150700.38-default/kernel/drivers/bluetooth/virtio_bt.ko.zst
/lib/modules/6.4.0-150700.38-default/kernel/drivers/char/hw_random/virtio-rng.ko.zst
/lib/modules/6.4.0-150700.38-default/kernel/drivers/crypto/virtio
/lib/modules/6.4.0-150700.38/kernel/drivers/block/virtio_blk.ko
...</screen>
               </listitem>
               <listitem>
                  <para>Update <filename>/etc/fstab</filename>. Change any storage devices from <literal>xvda</literal> to <literal>vda</literal>.</para>
               </listitem>
               <listitem>
                  <para>Update the boot loader configuration. Enter <command>rpm -q grub2</command> on the Xen guest to find out whether GRUB 2 is already installed. If not, install it with <command>zypper in grub2</command>.</para>
                  <para>Now make the newly installed default kernel the default for booting the OS. Also remove/update the kernel command line options that may refer to Xen-specific devices. You can do it either with YaST (<menuchoice><guimenu>System</guimenu><guimenu>Boot Loader</guimenu></menuchoice>), or manually:</para>
                  <itemizedlist mark="bullet" spacing="normal">
                     <listitem>
                        <para>Find the preferred Linux boot menu entry by listing them all:</para>
                        <screen><prompt>&gt;</prompt>cat /boot/grub2/grub.cfg | grep 'menuentry '</screen>
                        <para>Remember the order number (counted from zero) of the one you newly installed.</para>
                     </listitem>
                     <listitem>
                        <para>Set it as the default boot menu entry:</para>
                        <screen><prompt>&gt;</prompt><command>sudo</command> grub2-set-default <replaceable>N</replaceable></screen>
                        <para>Replace <replaceable>N</replaceable> with the number of the boot menu entry you previously discovered.</para>
                     </listitem>
                     <listitem>
                        <para>Open <filename>/etc/default/grub</filename>for editing, and look for the <option>GRUB_CMDLINE_LINUX_DEFAULT</option> and <option>GRUB_CMDLINE_LINUX_RECOVERY</option> options. Remove or update any reference to Xen-specific devices. In the following example, you can replace</para>
                        <screen>root=/dev/xvda1 disk=/dev/xvda console=xvc</screen>
                        <para>with</para>
                        <screen>root=/dev/vda1 disk=/dev/vda</screen>
                        <para>Do not forget to remove all references to <literal>xvc</literal>-type consoles (such as <literal>xvc0</literal>).</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Update <filename>device.map</filename> in either the <filename>/boot/grub2</filename> or <filename>/boot/grub2-efi</filename> directory, whichever that VM uses. Change any storage devices from <literal>xvda</literal> to <literal>vda</literal>.</para>
               </listitem>
               <listitem>
                  <para>To import new default settings, run</para>
                  <screen>grub2-mkconfig -o /boot/grub2/grub.cfg</screen>
               </listitem>
            </orderedlist>
         </sect3>
         <sect3>
            <title>Update the guest for boot under KVM</title>
            <orderedlist spacing="normal">
               <listitem>
                  <para>Update the system to use the default serial console. List the configured consoles, and remove symbolic links to <literal>xvc?</literal> ones.</para>
                  <screen><prompt>&gt;</prompt><command>sudo</command> ls -l /etc/systemd/system/getty.target.wants/
getty@tty1.service -&gt; /usr/lib/systemd/system/getty@.service
getty@xvc0.service -&gt; /usr/lib/systemd/system/getty@xvc0.service
getty@xvc1.service -&gt; /usr/lib/systemd/system/getty@xvc1.service

# rm /etc/systemd/system/getty.target.wants/getty@xvc?.service</screen>
               </listitem>
               <listitem>
                  <para>Update the <filename>/etc/securetty</filename> file. Replace <literal>xvc0</literal> with <literal>ttyS0</literal>.</para>
               </listitem>
            </orderedlist>
         </sect3>
      </sect2>
      <sect2>
         <title>Update the Xen VM Guest configuration</title>
         <para>This section describes how to export the configuration of the original Xen VM Guest, and what particular changes to apply to it so it can be imported as a KVM guest into <systemitem class="library">libvirt</systemitem>.</para>
         <sect3>
            <title>Export the Xen VM Guest configuration</title>
            <para>First export the configuration of the guest and save it to a file. For example:</para>
            <screen><prompt>&gt;</prompt><command>sudo</command> virsh dumpxml SLES11SP3
&lt;domain type='xen'&gt;
  &lt;name&gt;SLES11SP3&lt;/name&gt;
  &lt;uuid&gt;fa9ea4d7-8f95-30c0-bce9-9e58ffcabeb2&lt;/uuid&gt;
  &lt;memory&gt;524288&lt;/memory&gt;
  &lt;currentMemory&gt;524288&lt;/currentMemory&gt;
  &lt;vcpu&gt;1&lt;/vcpu&gt;
  &lt;bootloader&gt;/usr/bin/pygrub&lt;/bootloader&gt;
  &lt;os&gt;
    &lt;type&gt;linux&lt;/type&gt;
  &lt;/os&gt;
  &lt;clock offset='utc'/&gt;
  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;
  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;
  &lt;on_crash&gt;restart&lt;/on_crash&gt;
  &lt;devices&gt;
    &lt;emulator&gt;/usr/lib/xen/bin/qemu-dm&lt;/emulator&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='file'/&gt;
      &lt;source file='/var/lib/libvirt/images/SLES_11_SP2_JeOS.x86_64-0.0.2_para.raw'/&gt;
      &lt;target dev='xvda' bus='xen'/&gt;
    &lt;/disk&gt;
    &lt;interface type='bridge'&gt;
      &lt;mac address='00:16:3e:2d:91:c3'/&gt;
      &lt;source bridge='br0'/&gt;
      &lt;script path='vif-bridge'/&gt;
    &lt;/interface&gt;
    &lt;console type='pty'&gt;
      &lt;target type='xen' port='0'/&gt;
    &lt;/console&gt;
    &lt;input type='mouse' bus='xen'/&gt;
    &lt;graphics type='vnc' port='-1' autoport='yes' keymap='en-us'/&gt;
  &lt;/devices&gt;
&lt;/domain&gt;
</screen>
            <para>You can find detailed information on the libvirt XML format for VM Guest description at <link xlink:href="https://libvirt.org/formatdomain.html"/>.</para>
         </sect3>
         <sect3>
            <title>General changes to the guest configuration</title>
            <para>You need to make a few general changes to the exported Xen guest XML configuration to run it under the KVM hypervisor. The following applies to both fully virtualized and paravirtualized guests. The following XML elements are just an example and do not need to be in your specific configuration.</para>
            <tip>
               <title>Conventions used</title>
               <para>To refer to a node in the XML configuration file, an XPath syntax is used throughout this document. For example, to refer to a <literal>&lt;name&gt;</literal> inside the <literal>&lt;domain&gt;</literal> tag</para>
               <screen>&lt;domain&gt;
  &lt;name&gt;sles11sp3&lt;/name&gt;
&lt;/domain&gt;</screen>
               <para>an XPath equivalent <literal>/domain/name</literal> is used.</para>
            </tip>
            <orderedlist spacing="normal">
               <listitem>
                  <para>Change the <literal>type</literal> attribute of the <literal>/domain</literal> element from <literal>xen</literal>to <literal>kvm</literal>.</para>
               </listitem>
               <listitem>
                  <para>Remove the <literal>/domain/bootloader</literal> element section.</para>
               </listitem>
               <listitem>
                  <para>Remove the <literal>/domain/bootloader_args</literal> element section.</para>
               </listitem>
               <listitem>
                  <para>Change the <literal>/domain/os/type</literal> element value from <literal>linux</literal> to <literal>hvm</literal>.</para>
               </listitem>
               <listitem>
                  <para>Add <literal>&lt;boot dev="hd"/&gt;</literal> under the <literal>/domain/os</literal> element.</para>
               </listitem>
               <listitem>
                  <para>Add the <literal>arch</literal> attribute to the <literal>/domain/os/type</literal> element. Acceptable values are <literal>arch=”x86_64”</literal> or <literal>arch=”i686”</literal></para>
               </listitem>
               <listitem>
                  <para>Change the <literal>/domain/devices/emulator</literal> element from <literal>/usr/lib/xen/bin/qemu-dm'</literal> to <literal>/usr/bin/qemu-kvm</literal>.</para>
               </listitem>
               <listitem>
                  <para>For each disk associated with the paravirtualized (PV) guest, change the following:</para>
                  <itemizedlist mark="bullet" spacing="normal">
                     <listitem>
                        <para>Change the <literal>name</literal> attribute of the <literal>/domain/devices/disk/driver</literal> element from <literal>file</literal> to <literal>qemu</literal>, and add a <literal>type</literal> attribute for the disk type. For example, valid options include <literal>raw</literal> and <literal>qcow2</literal>.</para>
                     </listitem>
                     <listitem>
                        <para>Change the <literal>dev</literal> attribute of the <literal>/domain/devices/disk/target</literal> element from <literal>xvda</literal> to <literal>vda</literal>.</para>
                     </listitem>
                     <listitem>
                        <para>Change the <literal>bus</literal> attribute of the <literal>/domain/devices/disk/target</literal> element from <literal>xen</literal> to <literal>virtio</literal>.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>For each network interface card, make the following changes:</para>
                  <itemizedlist mark="bullet" spacing="normal">
                     <listitem>
                        <para>If there is a <literal>model</literal> defined in <literal>/domain/devices/interface</literal>, change its <literal>type</literal> attribute value to <literal>virtio</literal></para>
                        <screen>&lt;model type=”virtio”&gt;</screen>
                     </listitem>
                     <listitem>
                        <para>Delete all <literal>/domain/devices/interface/script</literal> sections.</para>
                     </listitem>
                     <listitem>
                        <para>Delete all <literal>/domain/devices/interface/target</literal> elements if the <literal>dev</literal> attribute starts with <literal>vif</literal> or <literal>vnet</literal> or <literal>veth</literal>. If using a custom network then change the <literal>dev</literal> value to that target.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Remove the <literal>/domain/devices/console</literal> element section if it exists.</para>
               </listitem>
               <listitem>
                  <para>Remove the <literal>/domain/devices/serial</literal> element section if it exists.</para>
               </listitem>
               <listitem>
                  <para>Change the <literal>bus</literal> attribute on the <literal>/domain/devices/input</literal> element from <literal>xen</literal> to <literal>ps2</literal>.</para>
               </listitem>
               <listitem>
                  <para>Add the following element for memory ballooning features under the <literal>/domain/devices</literal> element.</para>
                  <screen>&lt;memballoon model="virtio"/&gt;</screen>
               </listitem>
            </orderedlist>
            <tip>
               <title>Device name</title>
               <para><literal>&lt;target dev='hda' bus='ide'/&gt;</literal> controls the device under which the disk is exposed to the guest OS. The <literal>dev</literal> attribute indicates the <quote>logical</quote> device name. The actual device name specified is not guaranteed to map to the device name in the guest OS. Therefore you may need to change the disk mapping on the boot loader command line. For example, if the boot loader expects a root disk to be <literal>hda2</literal> but KVM still sees it as <literal>sda2</literal>, change the boot loader command line from</para>
               <screen>[...] root=/dev/hda2 resume=/dev/hda1 [...]</screen>
               <para>to</para>
               <screen>[...] root=/dev/sda2 resume=/dev/sda1 [...]</screen>
               <para>For paravirtualized <literal>xvda</literal> devices, change it to:</para>
               <screen>[...] root=/dev/vda2 resume=/dev/vda1 [...]</screen>
               <para>Otherwise the VM Guest refuses to boot in the KVM environment.</para>
            </tip>
         </sect3>
         <sect3>
            <title>The target KVM guest configuration</title>
            <para>After having applied all the modifications mentioned above, you end up with the following configuration for your KVM guest:</para>
            <screen>
&lt;domain type='kvm'&gt;
  &lt;name&gt;SLES11SP3&lt;/name&gt;
  &lt;uuid&gt;fa9ea4d7-8f95-30c0-bce9-9e58ffcabeb2&lt;/uuid&gt;
  &lt;memory&gt;524288&lt;/memory&gt;
  &lt;currentMemory&gt;524288&lt;/currentMemory&gt;
  &lt;vcpu cpuset='0-3'&gt;1&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch=”x86_64”&gt;hvm&lt;/type&gt;
    &lt;boot dev="hd"/&gt;
  &lt;/os&gt;
  &lt;clock offset='utc'/&gt;
  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;
  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;
  &lt;on_crash&gt;restart&lt;/on_crash&gt;
  &lt;devices&gt;
    &lt;emulator&gt;/usr/bin/qemu-kvm&lt;/emulator&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='qemu' type="raw"/&gt;
      &lt;source file='/var/lib/libvirt/images/SLES_11_SP2_JeOS.x86_64-0.0.2_para.raw'/&gt;
      &lt;target dev='vda' bus='virtio'/&gt;
    &lt;/disk&gt;
    &lt;interface type='bridge'&gt;
      &lt;mac address='00:16:3e:2d:91:c3'/&gt;
      &lt;source bridge='br0'/&gt;
    &lt;/interface&gt;
    &lt;input type='mouse' bus='usb'/&gt;
    &lt;graphics type='vnc' port='5900' autoport='yes' keymap='en-us'/&gt;
    &lt;memballoon model="virtio"/&gt;
  &lt;/devices&gt;
&lt;/domain&gt;

</screen>
            <para>Save the configuration to a file in your home directory, as <filename>SLES11SP3.xml</filename>, for example. It gets copied to the default <filename>/etc/libvirt/qemu</filename> directory after the import.</para>
         </sect3>
      </sect2>
      <sect2>
         <title>Migrate the VM Guest</title>
         <para>After you updated the VM Guest configuration, and applied necessary changes to the guest OS, shut down the original Xen guest, and run its clone under the KVM hypervisor.</para>
         <procedure>
            <step>
               <para>Shut down the guest on the Xen host by running <command>shutdown -h now</command> as <systemitem class="username">root</systemitem> from the console.</para>
            </step>
            <step>
               <para>Copy the disk images associated with the VM Guest if needed. A default configuration requires the Xen disk files to be copied from <filename>/var/lib/xen/images</filename> to <filename>/var/lib/kvm/images</filename>. The <filename>/var/lib/kvm/images</filename> directory may need to be created (as <systemitem class="username">root</systemitem>) if you have not previously created a VM Guest.</para>
            </step>
            <step>
               <para>Create the new domain, and register it with <systemitem class="library">libvirt</systemitem>:</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh define SLES11SP3.xml
 Domain SLES11SP3 defined from SLES11SP3.xml</screen>
            </step>
            <step>
               <para>Verify that the new guest is seen in the KVM configuration:</para>
               <screen><prompt>&gt;</prompt>virsh list –all</screen>
            </step>
            <step>
               <para>After the domain is created, you can start it:</para>
               <screen><prompt>&gt;</prompt><command>sudo</command> virsh start SLES11SP3
 Domain SLES11SP3 started</screen>
            </step>
         </procedure>
      </sect2>
   </sect1>
   <sect1>
      <title>More information</title>
      <para>For more information on libvirt, see <link xlink:href="https://libvirt.org"/>.</para>
      <para>You can find more details on the <systemitem class="library">libvirt</systemitem> XML format at <link xlink:href="https://libvirt.org/formatdomain.html"/>.</para>
   </sect1>
</chapter>
